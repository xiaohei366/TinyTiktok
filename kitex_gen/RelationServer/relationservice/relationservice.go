// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	RelationServer "github.com/xiaohei366/TinyTiktok/kitex_gen/RelationServer"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*RelationServer.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":               kitex.NewMethodInfo(relationActionHandler, newRelationActionArgs, newRelationActionResult, false),
		"MGetRelationFollowList":       kitex.NewMethodInfo(mGetRelationFollowListHandler, newMGetRelationFollowListArgs, newMGetRelationFollowListResult, false),
		"MGetUserRelationFollowerList": kitex.NewMethodInfo(mGetUserRelationFollowerListHandler, newMGetUserRelationFollowerListArgs, newMGetUserRelationFollowerListResult, false),
		"QueryRelation":                kitex.NewMethodInfo(queryRelationHandler, newQueryRelationArgs, newQueryRelationResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "RelationServer",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationServer.DouyinRelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationServer.RelationService).RelationAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationActionArgs:
		success, err := handler.(RelationServer.RelationService).RelationAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationActionResult)
		realResult.Success = success
	}
	return nil
}
func newRelationActionArgs() interface{} {
	return &RelationActionArgs{}
}

func newRelationActionResult() interface{} {
	return &RelationActionResult{}
}

type RelationActionArgs struct {
	Req *RelationServer.DouyinRelationActionRequest
}

func (p *RelationActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationServer.DouyinRelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RelationActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RelationActionArgs) Unmarshal(in []byte) error {
	msg := new(RelationServer.DouyinRelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationActionArgs_Req_DEFAULT *RelationServer.DouyinRelationActionRequest

func (p *RelationActionArgs) GetReq() *RelationServer.DouyinRelationActionRequest {
	if !p.IsSetReq() {
		return RelationActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type RelationActionResult struct {
	Success *RelationServer.DouyinRelationActionResponse
}

var RelationActionResult_Success_DEFAULT *RelationServer.DouyinRelationActionResponse

func (p *RelationActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationServer.DouyinRelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RelationActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RelationActionResult) Unmarshal(in []byte) error {
	msg := new(RelationServer.DouyinRelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationActionResult) GetSuccess() *RelationServer.DouyinRelationActionResponse {
	if !p.IsSetSuccess() {
		return RelationActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationServer.DouyinRelationActionResponse)
}

func (p *RelationActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetRelationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationServer.DouyinRelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationServer.RelationService).MGetRelationFollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetRelationFollowListArgs:
		success, err := handler.(RelationServer.RelationService).MGetRelationFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetRelationFollowListResult)
		realResult.Success = success
	}
	return nil
}
func newMGetRelationFollowListArgs() interface{} {
	return &MGetRelationFollowListArgs{}
}

func newMGetRelationFollowListResult() interface{} {
	return &MGetRelationFollowListResult{}
}

type MGetRelationFollowListArgs struct {
	Req *RelationServer.DouyinRelationFollowListRequest
}

func (p *MGetRelationFollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationServer.DouyinRelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MGetRelationFollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MGetRelationFollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MGetRelationFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetRelationFollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetRelationFollowListArgs) Unmarshal(in []byte) error {
	msg := new(RelationServer.DouyinRelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetRelationFollowListArgs_Req_DEFAULT *RelationServer.DouyinRelationFollowListRequest

func (p *MGetRelationFollowListArgs) GetReq() *RelationServer.DouyinRelationFollowListRequest {
	if !p.IsSetReq() {
		return MGetRelationFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetRelationFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetRelationFollowListResult struct {
	Success *RelationServer.DouyinRelationFollowListResponse
}

var MGetRelationFollowListResult_Success_DEFAULT *RelationServer.DouyinRelationFollowListResponse

func (p *MGetRelationFollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationServer.DouyinRelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MGetRelationFollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MGetRelationFollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MGetRelationFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetRelationFollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetRelationFollowListResult) Unmarshal(in []byte) error {
	msg := new(RelationServer.DouyinRelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetRelationFollowListResult) GetSuccess() *RelationServer.DouyinRelationFollowListResponse {
	if !p.IsSetSuccess() {
		return MGetRelationFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetRelationFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationServer.DouyinRelationFollowListResponse)
}

func (p *MGetRelationFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetUserRelationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationServer.DouyinRelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationServer.RelationService).MGetUserRelationFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetUserRelationFollowerListArgs:
		success, err := handler.(RelationServer.RelationService).MGetUserRelationFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetUserRelationFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newMGetUserRelationFollowerListArgs() interface{} {
	return &MGetUserRelationFollowerListArgs{}
}

func newMGetUserRelationFollowerListResult() interface{} {
	return &MGetUserRelationFollowerListResult{}
}

type MGetUserRelationFollowerListArgs struct {
	Req *RelationServer.DouyinRelationFollowerListRequest
}

func (p *MGetUserRelationFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationServer.DouyinRelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MGetUserRelationFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MGetUserRelationFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MGetUserRelationFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetUserRelationFollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetUserRelationFollowerListArgs) Unmarshal(in []byte) error {
	msg := new(RelationServer.DouyinRelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetUserRelationFollowerListArgs_Req_DEFAULT *RelationServer.DouyinRelationFollowerListRequest

func (p *MGetUserRelationFollowerListArgs) GetReq() *RelationServer.DouyinRelationFollowerListRequest {
	if !p.IsSetReq() {
		return MGetUserRelationFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetUserRelationFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetUserRelationFollowerListResult struct {
	Success *RelationServer.DouyinRelationFollowerListResponse
}

var MGetUserRelationFollowerListResult_Success_DEFAULT *RelationServer.DouyinRelationFollowerListResponse

func (p *MGetUserRelationFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationServer.DouyinRelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MGetUserRelationFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MGetUserRelationFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MGetUserRelationFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetUserRelationFollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetUserRelationFollowerListResult) Unmarshal(in []byte) error {
	msg := new(RelationServer.DouyinRelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetUserRelationFollowerListResult) GetSuccess() *RelationServer.DouyinRelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return MGetUserRelationFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetUserRelationFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationServer.DouyinRelationFollowerListResponse)
}

func (p *MGetUserRelationFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func queryRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationServer.DouyinQueryRelationRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationServer.RelationService).QueryRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryRelationArgs:
		success, err := handler.(RelationServer.RelationService).QueryRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryRelationResult)
		realResult.Success = success
	}
	return nil
}
func newQueryRelationArgs() interface{} {
	return &QueryRelationArgs{}
}

func newQueryRelationResult() interface{} {
	return &QueryRelationResult{}
}

type QueryRelationArgs struct {
	Req *RelationServer.DouyinQueryRelationRequest
}

func (p *QueryRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationServer.DouyinQueryRelationRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryRelationArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryRelationArgs) Unmarshal(in []byte) error {
	msg := new(RelationServer.DouyinQueryRelationRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryRelationArgs_Req_DEFAULT *RelationServer.DouyinQueryRelationRequest

func (p *QueryRelationArgs) GetReq() *RelationServer.DouyinQueryRelationRequest {
	if !p.IsSetReq() {
		return QueryRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

type QueryRelationResult struct {
	Success *RelationServer.DouyinQueryRelationResponse
}

var QueryRelationResult_Success_DEFAULT *RelationServer.DouyinQueryRelationResponse

func (p *QueryRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationServer.DouyinQueryRelationResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryRelationResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryRelationResult) Unmarshal(in []byte) error {
	msg := new(RelationServer.DouyinQueryRelationResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryRelationResult) GetSuccess() *RelationServer.DouyinQueryRelationResponse {
	if !p.IsSetSuccess() {
		return QueryRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationServer.DouyinQueryRelationResponse)
}

func (p *QueryRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, Req *RelationServer.DouyinRelationActionRequest) (r *RelationServer.DouyinRelationActionResponse, err error) {
	var _args RelationActionArgs
	_args.Req = Req
	var _result RelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetRelationFollowList(ctx context.Context, Req *RelationServer.DouyinRelationFollowListRequest) (r *RelationServer.DouyinRelationFollowListResponse, err error) {
	var _args MGetRelationFollowListArgs
	_args.Req = Req
	var _result MGetRelationFollowListResult
	if err = p.c.Call(ctx, "MGetRelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUserRelationFollowerList(ctx context.Context, Req *RelationServer.DouyinRelationFollowerListRequest) (r *RelationServer.DouyinRelationFollowerListResponse, err error) {
	var _args MGetUserRelationFollowerListArgs
	_args.Req = Req
	var _result MGetUserRelationFollowerListResult
	if err = p.c.Call(ctx, "MGetUserRelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryRelation(ctx context.Context, Req *RelationServer.DouyinQueryRelationRequest) (r *RelationServer.DouyinQueryRelationResponse, err error) {
	var _args QueryRelationArgs
	_args.Req = Req
	var _result QueryRelationResult
	if err = p.c.Call(ctx, "QueryRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
