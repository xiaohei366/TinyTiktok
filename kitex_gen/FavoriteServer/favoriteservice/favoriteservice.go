// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoriteservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	FavoriteServer "github.com/xiaohei366/TinyTiktok/kitex_gen/FavoriteServer"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*FavoriteServer.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction":     kitex.NewMethodInfo(favoriteActionHandler, newFavoriteActionArgs, newFavoriteActionResult, false),
		"GetFavoriteList":    kitex.NewMethodInfo(getFavoriteListHandler, newGetFavoriteListArgs, newGetFavoriteListResult, false),
		"GetFavoriteUser":    kitex.NewMethodInfo(getFavoriteUserHandler, newGetFavoriteUserArgs, newGetFavoriteUserResult, false),
		"GetFavoriteVideo":   kitex.NewMethodInfo(getFavoriteVideoHandler, newGetFavoriteVideoArgs, newGetFavoriteVideoResult, false),
		"QueryUserLikeVideo": kitex.NewMethodInfo(queryUserLikeVideoHandler, newQueryUserLikeVideoArgs, newQueryUserLikeVideoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "FavoriteServer",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(FavoriteServer.DouyinFavoriteActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(FavoriteServer.FavoriteService).FavoriteAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavoriteActionArgs:
		success, err := handler.(FavoriteServer.FavoriteService).FavoriteAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavoriteActionResult)
		realResult.Success = success
	}
	return nil
}
func newFavoriteActionArgs() interface{} {
	return &FavoriteActionArgs{}
}

func newFavoriteActionResult() interface{} {
	return &FavoriteActionResult{}
}

type FavoriteActionArgs struct {
	Req *FavoriteServer.DouyinFavoriteActionRequest
}

func (p *FavoriteActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(FavoriteServer.DouyinFavoriteActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FavoriteActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FavoriteActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FavoriteActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavoriteActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavoriteActionArgs) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinFavoriteActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavoriteActionArgs_Req_DEFAULT *FavoriteServer.DouyinFavoriteActionRequest

func (p *FavoriteActionArgs) GetReq() *FavoriteServer.DouyinFavoriteActionRequest {
	if !p.IsSetReq() {
		return FavoriteActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavoriteActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavoriteActionResult struct {
	Success *FavoriteServer.DouyinFavoriteActionResponse
}

var FavoriteActionResult_Success_DEFAULT *FavoriteServer.DouyinFavoriteActionResponse

func (p *FavoriteActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(FavoriteServer.DouyinFavoriteActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FavoriteActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FavoriteActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FavoriteActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavoriteActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavoriteActionResult) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinFavoriteActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavoriteActionResult) GetSuccess() *FavoriteServer.DouyinFavoriteActionResponse {
	if !p.IsSetSuccess() {
		return FavoriteActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavoriteActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*FavoriteServer.DouyinFavoriteActionResponse)
}

func (p *FavoriteActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(FavoriteServer.DouyinFavoriteListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(FavoriteServer.FavoriteService).GetFavoriteList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFavoriteListArgs:
		success, err := handler.(FavoriteServer.FavoriteService).GetFavoriteList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFavoriteListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFavoriteListArgs() interface{} {
	return &GetFavoriteListArgs{}
}

func newGetFavoriteListResult() interface{} {
	return &GetFavoriteListResult{}
}

type GetFavoriteListArgs struct {
	Req *FavoriteServer.DouyinFavoriteListRequest
}

func (p *GetFavoriteListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(FavoriteServer.DouyinFavoriteListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFavoriteListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFavoriteListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFavoriteListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFavoriteListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFavoriteListArgs) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinFavoriteListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFavoriteListArgs_Req_DEFAULT *FavoriteServer.DouyinFavoriteListRequest

func (p *GetFavoriteListArgs) GetReq() *FavoriteServer.DouyinFavoriteListRequest {
	if !p.IsSetReq() {
		return GetFavoriteListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFavoriteListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFavoriteListResult struct {
	Success *FavoriteServer.DouyinFavoriteListResponse
}

var GetFavoriteListResult_Success_DEFAULT *FavoriteServer.DouyinFavoriteListResponse

func (p *GetFavoriteListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(FavoriteServer.DouyinFavoriteListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFavoriteListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFavoriteListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFavoriteListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFavoriteListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFavoriteListResult) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinFavoriteListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFavoriteListResult) GetSuccess() *FavoriteServer.DouyinFavoriteListResponse {
	if !p.IsSetSuccess() {
		return GetFavoriteListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFavoriteListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FavoriteServer.DouyinFavoriteListResponse)
}

func (p *GetFavoriteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFavoriteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(FavoriteServer.DouyinUserBeFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(FavoriteServer.FavoriteService).GetFavoriteUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFavoriteUserArgs:
		success, err := handler.(FavoriteServer.FavoriteService).GetFavoriteUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFavoriteUserResult)
		realResult.Success = success
	}
	return nil
}
func newGetFavoriteUserArgs() interface{} {
	return &GetFavoriteUserArgs{}
}

func newGetFavoriteUserResult() interface{} {
	return &GetFavoriteUserResult{}
}

type GetFavoriteUserArgs struct {
	Req *FavoriteServer.DouyinUserBeFavoriteRequest
}

func (p *GetFavoriteUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(FavoriteServer.DouyinUserBeFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFavoriteUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFavoriteUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFavoriteUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFavoriteUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFavoriteUserArgs) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinUserBeFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFavoriteUserArgs_Req_DEFAULT *FavoriteServer.DouyinUserBeFavoriteRequest

func (p *GetFavoriteUserArgs) GetReq() *FavoriteServer.DouyinUserBeFavoriteRequest {
	if !p.IsSetReq() {
		return GetFavoriteUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFavoriteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFavoriteUserResult struct {
	Success *FavoriteServer.DouyinUserBeFavoriteResponse
}

var GetFavoriteUserResult_Success_DEFAULT *FavoriteServer.DouyinUserBeFavoriteResponse

func (p *GetFavoriteUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(FavoriteServer.DouyinUserBeFavoriteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFavoriteUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFavoriteUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFavoriteUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFavoriteUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFavoriteUserResult) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinUserBeFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFavoriteUserResult) GetSuccess() *FavoriteServer.DouyinUserBeFavoriteResponse {
	if !p.IsSetSuccess() {
		return GetFavoriteUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFavoriteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*FavoriteServer.DouyinUserBeFavoriteResponse)
}

func (p *GetFavoriteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFavoriteVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(FavoriteServer.DouyinVideoBeFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(FavoriteServer.FavoriteService).GetFavoriteVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFavoriteVideoArgs:
		success, err := handler.(FavoriteServer.FavoriteService).GetFavoriteVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFavoriteVideoResult)
		realResult.Success = success
	}
	return nil
}
func newGetFavoriteVideoArgs() interface{} {
	return &GetFavoriteVideoArgs{}
}

func newGetFavoriteVideoResult() interface{} {
	return &GetFavoriteVideoResult{}
}

type GetFavoriteVideoArgs struct {
	Req *FavoriteServer.DouyinVideoBeFavoriteRequest
}

func (p *GetFavoriteVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(FavoriteServer.DouyinVideoBeFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFavoriteVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFavoriteVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFavoriteVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFavoriteVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFavoriteVideoArgs) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinVideoBeFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFavoriteVideoArgs_Req_DEFAULT *FavoriteServer.DouyinVideoBeFavoriteRequest

func (p *GetFavoriteVideoArgs) GetReq() *FavoriteServer.DouyinVideoBeFavoriteRequest {
	if !p.IsSetReq() {
		return GetFavoriteVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFavoriteVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFavoriteVideoResult struct {
	Success *FavoriteServer.DouyinVideoBeFavoriteResponse
}

var GetFavoriteVideoResult_Success_DEFAULT *FavoriteServer.DouyinVideoBeFavoriteResponse

func (p *GetFavoriteVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(FavoriteServer.DouyinVideoBeFavoriteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFavoriteVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFavoriteVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFavoriteVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFavoriteVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFavoriteVideoResult) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinVideoBeFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFavoriteVideoResult) GetSuccess() *FavoriteServer.DouyinVideoBeFavoriteResponse {
	if !p.IsSetSuccess() {
		return GetFavoriteVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFavoriteVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*FavoriteServer.DouyinVideoBeFavoriteResponse)
}

func (p *GetFavoriteVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func queryUserLikeVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(FavoriteServer.DouyinQueryFavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(FavoriteServer.FavoriteService).QueryUserLikeVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryUserLikeVideoArgs:
		success, err := handler.(FavoriteServer.FavoriteService).QueryUserLikeVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryUserLikeVideoResult)
		realResult.Success = success
	}
	return nil
}
func newQueryUserLikeVideoArgs() interface{} {
	return &QueryUserLikeVideoArgs{}
}

func newQueryUserLikeVideoResult() interface{} {
	return &QueryUserLikeVideoResult{}
}

type QueryUserLikeVideoArgs struct {
	Req *FavoriteServer.DouyinQueryFavoriteRequest
}

func (p *QueryUserLikeVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(FavoriteServer.DouyinQueryFavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryUserLikeVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryUserLikeVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryUserLikeVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryUserLikeVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryUserLikeVideoArgs) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinQueryFavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryUserLikeVideoArgs_Req_DEFAULT *FavoriteServer.DouyinQueryFavoriteRequest

func (p *QueryUserLikeVideoArgs) GetReq() *FavoriteServer.DouyinQueryFavoriteRequest {
	if !p.IsSetReq() {
		return QueryUserLikeVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryUserLikeVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type QueryUserLikeVideoResult struct {
	Success *FavoriteServer.DouyinQueryFavoriteResponse
}

var QueryUserLikeVideoResult_Success_DEFAULT *FavoriteServer.DouyinQueryFavoriteResponse

func (p *QueryUserLikeVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(FavoriteServer.DouyinQueryFavoriteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryUserLikeVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryUserLikeVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryUserLikeVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryUserLikeVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryUserLikeVideoResult) Unmarshal(in []byte) error {
	msg := new(FavoriteServer.DouyinQueryFavoriteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryUserLikeVideoResult) GetSuccess() *FavoriteServer.DouyinQueryFavoriteResponse {
	if !p.IsSetSuccess() {
		return QueryUserLikeVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryUserLikeVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*FavoriteServer.DouyinQueryFavoriteResponse)
}

func (p *QueryUserLikeVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, Req *FavoriteServer.DouyinFavoriteActionRequest) (r *FavoriteServer.DouyinFavoriteActionResponse, err error) {
	var _args FavoriteActionArgs
	_args.Req = Req
	var _result FavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, Req *FavoriteServer.DouyinFavoriteListRequest) (r *FavoriteServer.DouyinFavoriteListResponse, err error) {
	var _args GetFavoriteListArgs
	_args.Req = Req
	var _result GetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteUser(ctx context.Context, Req *FavoriteServer.DouyinUserBeFavoriteRequest) (r *FavoriteServer.DouyinUserBeFavoriteResponse, err error) {
	var _args GetFavoriteUserArgs
	_args.Req = Req
	var _result GetFavoriteUserResult
	if err = p.c.Call(ctx, "GetFavoriteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteVideo(ctx context.Context, Req *FavoriteServer.DouyinVideoBeFavoriteRequest) (r *FavoriteServer.DouyinVideoBeFavoriteResponse, err error) {
	var _args GetFavoriteVideoArgs
	_args.Req = Req
	var _result GetFavoriteVideoResult
	if err = p.c.Call(ctx, "GetFavoriteVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserLikeVideo(ctx context.Context, Req *FavoriteServer.DouyinQueryFavoriteRequest) (r *FavoriteServer.DouyinQueryFavoriteResponse, err error) {
	var _args QueryUserLikeVideoArgs
	_args.Req = Req
	var _result QueryUserLikeVideoResult
	if err = p.c.Call(ctx, "QueryUserLikeVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
