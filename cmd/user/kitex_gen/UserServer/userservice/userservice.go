// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	UserServer "github.com/xiaohei366/TinyTiktok/cmd/user/kitex_gen/UserServer"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*UserServer.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":              kitex.NewMethodInfo(registerHandler, newRegisterArgs, newRegisterResult, false),
		"Login":                 kitex.NewMethodInfo(loginHandler, newLoginArgs, newLoginResult, false),
		"GetUserInfo":           kitex.NewMethodInfo(getUserInfoHandler, newGetUserInfoArgs, newGetUserInfoResult, false),
		"MGetUserInfo":          kitex.NewMethodInfo(mGetUserInfoHandler, newMGetUserInfoArgs, newMGetUserInfoResult, false),
		"ChangeUserFollowCount": kitex.NewMethodInfo(changeUserFollowCountHandler, newChangeUserFollowCountArgs, newChangeUserFollowCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "UserServer",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(UserServer.DouyinUserRegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(UserServer.UserService).Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterArgs:
		success, err := handler.(UserServer.UserService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *UserServer.DouyinUserRegisterRequest
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UserServer.DouyinUserRegisterRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinUserRegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *UserServer.DouyinUserRegisterRequest

func (p *RegisterArgs) GetReq() *UserServer.DouyinUserRegisterRequest {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

type RegisterResult struct {
	Success *UserServer.DouyinUserRegisterResponse
}

var RegisterResult_Success_DEFAULT *UserServer.DouyinUserRegisterResponse

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(UserServer.DouyinUserRegisterResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinUserRegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *UserServer.DouyinUserRegisterResponse {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserServer.DouyinUserRegisterResponse)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(UserServer.DouyinUserLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(UserServer.UserService).Login(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginArgs:
		success, err := handler.(UserServer.UserService).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
	}
	return nil
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *UserServer.DouyinUserLoginRequest
}

func (p *LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UserServer.DouyinUserLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in LoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinUserLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *UserServer.DouyinUserLoginRequest

func (p *LoginArgs) GetReq() *UserServer.DouyinUserLoginRequest {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

type LoginResult struct {
	Success *UserServer.DouyinUserLoginResponse
}

var LoginResult_Success_DEFAULT *UserServer.DouyinUserLoginResponse

func (p *LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(UserServer.DouyinUserLoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in LoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinUserLoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *UserServer.DouyinUserLoginResponse {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserServer.DouyinUserLoginResponse)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(UserServer.DouyinUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(UserServer.UserService).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserInfoArgs:
		success, err := handler.(UserServer.UserService).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *UserServer.DouyinUserRequest
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UserServer.DouyinUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserInfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *UserServer.DouyinUserRequest

func (p *GetUserInfoArgs) GetReq() *UserServer.DouyinUserRequest {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserInfoResult struct {
	Success *UserServer.DouyinUserResponse
}

var GetUserInfoResult_Success_DEFAULT *UserServer.DouyinUserResponse

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(UserServer.DouyinUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserInfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *UserServer.DouyinUserResponse {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserServer.DouyinUserResponse)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(UserServer.DouyinMUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(UserServer.UserService).MGetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetUserInfoArgs:
		success, err := handler.(UserServer.UserService).MGetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetUserInfoResult)
		realResult.Success = success
	}
	return nil
}
func newMGetUserInfoArgs() interface{} {
	return &MGetUserInfoArgs{}
}

func newMGetUserInfoResult() interface{} {
	return &MGetUserInfoResult{}
}

type MGetUserInfoArgs struct {
	Req *UserServer.DouyinMUserRequest
}

func (p *MGetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UserServer.DouyinMUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MGetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MGetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MGetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetUserInfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinMUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetUserInfoArgs_Req_DEFAULT *UserServer.DouyinMUserRequest

func (p *MGetUserInfoArgs) GetReq() *UserServer.DouyinMUserRequest {
	if !p.IsSetReq() {
		return MGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetUserInfoResult struct {
	Success *UserServer.DouyinMUserResponse
}

var MGetUserInfoResult_Success_DEFAULT *UserServer.DouyinMUserResponse

func (p *MGetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(UserServer.DouyinMUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MGetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MGetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MGetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetUserInfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinMUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetUserInfoResult) GetSuccess() *UserServer.DouyinMUserResponse {
	if !p.IsSetSuccess() {
		return MGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserServer.DouyinMUserResponse)
}

func (p *MGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func changeUserFollowCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(UserServer.DouyinChangeUserFollowRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(UserServer.UserService).ChangeUserFollowCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ChangeUserFollowCountArgs:
		success, err := handler.(UserServer.UserService).ChangeUserFollowCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ChangeUserFollowCountResult)
		realResult.Success = success
	}
	return nil
}
func newChangeUserFollowCountArgs() interface{} {
	return &ChangeUserFollowCountArgs{}
}

func newChangeUserFollowCountResult() interface{} {
	return &ChangeUserFollowCountResult{}
}

type ChangeUserFollowCountArgs struct {
	Req *UserServer.DouyinChangeUserFollowRequest
}

func (p *ChangeUserFollowCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UserServer.DouyinChangeUserFollowRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChangeUserFollowCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChangeUserFollowCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChangeUserFollowCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ChangeUserFollowCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ChangeUserFollowCountArgs) Unmarshal(in []byte) error {
	msg := new(UserServer.DouyinChangeUserFollowRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChangeUserFollowCountArgs_Req_DEFAULT *UserServer.DouyinChangeUserFollowRequest

func (p *ChangeUserFollowCountArgs) GetReq() *UserServer.DouyinChangeUserFollowRequest {
	if !p.IsSetReq() {
		return ChangeUserFollowCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChangeUserFollowCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type ChangeUserFollowCountResult struct {
	Success *UserServer.BaseResp
}

var ChangeUserFollowCountResult_Success_DEFAULT *UserServer.BaseResp

func (p *ChangeUserFollowCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(UserServer.BaseResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChangeUserFollowCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChangeUserFollowCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChangeUserFollowCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ChangeUserFollowCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ChangeUserFollowCountResult) Unmarshal(in []byte) error {
	msg := new(UserServer.BaseResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChangeUserFollowCountResult) GetSuccess() *UserServer.BaseResp {
	if !p.IsSetSuccess() {
		return ChangeUserFollowCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChangeUserFollowCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserServer.BaseResp)
}

func (p *ChangeUserFollowCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, Req *UserServer.DouyinUserRegisterRequest) (r *UserServer.DouyinUserRegisterResponse, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, Req *UserServer.DouyinUserLoginRequest) (r *UserServer.DouyinUserLoginResponse, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *UserServer.DouyinUserRequest) (r *UserServer.DouyinUserResponse, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUserInfo(ctx context.Context, Req *UserServer.DouyinMUserRequest) (r *UserServer.DouyinMUserResponse, err error) {
	var _args MGetUserInfoArgs
	_args.Req = Req
	var _result MGetUserInfoResult
	if err = p.c.Call(ctx, "MGetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeUserFollowCount(ctx context.Context, Req *UserServer.DouyinChangeUserFollowRequest) (r *UserServer.BaseResp, err error) {
	var _args ChangeUserFollowCountArgs
	_args.Req = Req
	var _result ChangeUserFollowCountResult
	if err = p.c.Call(ctx, "ChangeUserFollowCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
