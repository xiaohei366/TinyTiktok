// Code generated by hertz generator.

package ApiServer

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/xiaohei366/TinyTiktok/cmd/api/biz/kitex_gen/RelationServer"
	"github.com/xiaohei366/TinyTiktok/cmd/api/biz/kitex_gen/UserServer"
	mw "github.com/xiaohei366/TinyTiktok/cmd/api/biz/middleware"
	ApiServer "github.com/xiaohei366/TinyTiktok/cmd/api/biz/model/ApiServer"
	"github.com/xiaohei366/TinyTiktok/cmd/api/biz/rpc"
	"github.com/xiaohei366/TinyTiktok/pkg/errno"
	"github.com/xiaohei366/TinyTiktok/pkg/shared"
)

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinUserRegisterRequest
	var user_id int64
	var token string
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//调用PRC方法，完成注册操作
	user_id, err = rpc.Register(context.Background(), &UserServer.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		SendRegisterResponse(c, errno.ConvertErr(err), -1, "")
		return
	}
	// 使用JWT来产生Token--注意是使用id，因为这个将作为存储信息在token中
	token, _, err = mw.JwtMiddleware.TokenGenerator(user_id)
	if err != nil {
		SendRegisterResponse(c, errno.ConvertErr(err), -1, "")
		return
	}
	//成功响应
	SendRegisterResponse(c, errno.Success, user_id, token)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	//先执行Authenticator--期间失败则执行unauthorized&HTTPStatusMessageFunc
	//随后创建token
	//若PayloadFunc不为空，则此时执行PayloadFunc
	//最后执行LoginResponse返回信息
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinUserRequest
	var u *UserServer.User
	var isFollow bool
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//调用PRC方法，获得用户信息
	u, err = rpc.GetUserInfo(context.Background(), &UserServer.DouyinUserRequest{
		UserId: req.UserId,
	})
	if err != nil {
		SendUesrInfoResponse(c, errno.ConvertErr(err), nil, false)
		return
	}
	//调用PRC方法，知道token用户是否关注查询的用户
	v, _ := c.Get(shared.IdentityKey) // 取出token的id
	isFollow, err = rpc.QueryRelation(context.Background(), &RelationServer.DouyinQueryRelationRequest{
		UserId:   v.(*ApiServer.User).Id,
		ToUserId: req.UserId,
	})
	if err != nil {
		SendUesrInfoResponse(c, errno.ConvertErr(err), nil, false)
		return
	}
	//成功响应
	SendUesrInfoResponse(c, errno.Success, u, isFollow)
}

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinFeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinPublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinPublishListResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinFavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinFavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinCommentActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinCommentListResponse)

	c.JSON(consts.StatusOK, resp)
}

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	v, _ := c.Get(shared.IdentityKey) // 取出token的id
	//调用PRC方法，在follow服务器上完成关注操作
	_, err = rpc.FollowAction(context.Background(), &RelationServer.DouyinRelationActionRequest{
		UserId:     v.(*ApiServer.User).Id,
		ToUserId:   req.ToUserId,
		ActionType: req.ActionType,
	})
	if err != nil {
		SendFollowActionResponse(c, errno.ConvertErr(err))
		return
	}
	//成功响应
	SendFollowActionResponse(c, errno.Success)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//调用PRC方法，获得关注列表
	resp, err := rpc.GetFollowList(context.Background(), &RelationServer.DouyinRelationFollowListRequest{
		UserId: req.UserId,
	})
	if err != nil {
		SendFollowListResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//成功响应
	SendFollowListResponse(c, errno.Success, resp.UserList)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//调用PRC方法，获得粉丝列表
	resp, err := rpc.GetFollowerList(context.Background(), &RelationServer.DouyinRelationFollowerListRequest{
		UserId: req.UserId,
	})
	if err != nil {
		SendFollowListResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//成功响应
	SendFollowListResponse(c, errno.Success, resp.UserList)
}
