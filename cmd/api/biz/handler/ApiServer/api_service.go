// Code generated by hertz generator.

package ApiServer

import (
	"bytes"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/klog"
	"github.com/xiaohei366/TinyTiktok/cmd/api/biz/kitex_gen/UserServer"
	"github.com/xiaohei366/TinyTiktok/cmd/api/biz/kitex_gen/VideoServer"
	mw "github.com/xiaohei366/TinyTiktok/cmd/api/biz/middleware"
	"github.com/xiaohei366/TinyTiktok/cmd/api/biz/model/ApiServer"
	"github.com/xiaohei366/TinyTiktok/cmd/api/biz/rpc"
	"github.com/xiaohei366/TinyTiktok/pkg/errno"
	"io"
)

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinUserRegisterRequest
	var user_id int64
	var token string
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//调用PRC方法，完成注册操作
	user_id, err = rpc.Register(context.Background(), &UserServer.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		SendRegisterResponse(c, errno.ConvertErr(err), -1, "")
		return
	}
	// 使用JWT来产生Token--注意是使用id，因为这个将作为存储信息在token中
	token, _, err = mw.JwtMiddleware.TokenGenerator(user_id)
	if err != nil {
		SendRegisterResponse(c, errno.ConvertErr(err), -1, "")
		return
	}
	//成功响应
	SendRegisterResponse(c, errno.Success, user_id, token)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	//先执行Authenticator--期间失败则执行unauthorized&HTTPStatusMessageFunc
	//随后创建token
	//若PayloadFunc不为空，则此时执行PayloadFunc
	//最后执行LoginResponse返回信息
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinUserRequest
	var u *UserServer.User
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//调用PRC方法，获得用户信息
	u, err = rpc.GetUserInfo(context.Background(), &UserServer.DouyinUserRequest{
		UserId: req.UserId,
	})
	if err != nil {
		SendUesrInfoResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//成功响应
	SendUesrInfoResponse(c, errno.Success, u)
}

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinFeedRequest
	err = c.BindAndValidate(&req) //验证参数
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	request := &VideoServer.DouyinFeedRequest{
		LatestTime: req.LatestTime,
		Token:      req.Token,
	}
	videos, err := rpc.FeedVideos(context.Background(), request)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
	}
	SendResponse(c, errno.Success, videos)
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinPublishActionRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//拿userid //这儿没验证
	uid := mw.JwtMiddleware.IdentityHandler(ctx, c).(*ApiServer.User)
	klog.Info("uid:", uid.Id, uid.Name)
	//拿取视频文件。
	fileHeader, err := c.FormFile("data")
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	file, err := fileHeader.Open()
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	defer file.Close()

	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, file); err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	request := &VideoServer.DouyinPublishActionRequest{
		User: &UserServer.User{
			Id: uid.Id,
		},
		Token: req.Token,
		Title: req.Title,
		Data:  buf.Bytes(),
	}
	resp, err := rpc.PublishVideos(ctx, request)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
	}
	SendResponse(c, errno.Success, resp) //这个只有测试才知道对不对

}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	//测试可用
	var err error
	var req ApiServer.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	request := &VideoServer.DouyinPublishListRequest{
		UserId: req.UserId,
		Token:  req.Token,
	}

	resp, err := rpc.PublishList(ctx, request)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
	}
	SendResponse(c, errno.Success, resp) //这个只有测试才知道对不对
}

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinFavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	klog.Info("req:", req.Token, req.UserId)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinFavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinCommentActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.DouyinCommentListResponse)

	c.JSON(consts.StatusOK, resp)
}
